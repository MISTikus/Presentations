@inject NavigationManager navigator;
@inject IJSRuntime js;

<style>
    .main-header {
        line-height: 1;
        border-bottom: 1px solid #e5e5e5;
    }
</style>

<header class="main-header py-3">
    <div class="row flex-nowrap justify-content-between align-items-center">
        <ul class="nav col-4">
            <li class="nav-item">
                <a class="nav-link @(IsCurrentPage(string.Empty) ? "disabled" : "")" href="/">Мои дела</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @(IsCurrentPage("archive") ? "disabled" : "")" href="/archive">Архив</a>
            </li>
        </ul>
        <div class="col-4 text-center">
            <a class="blog-header-logo text-dark" href="/">ToDo App</a>
        </div>
        <div class="col-4 d-flex justify-content-end align-items-center">
            <div class="input-group input-group-sm" style="@(!this.searching ? "display: none;" : "")">
                <input id="search" type="text" class="form-control" placeholder="Поиск" @bind-value="this.searchQuery"
                    @onkeyup="OnSearch">
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => OnSearch()">
                    <span class="oi oi-magnifying-glass"></span>
                </button>
            </div>

            <button class="btn btn-sm btn-light text-muted" @onclick="ToggleSearching"
                style="@(this.searching ? "display: none;" : "")">
                <span class="oi oi-magnifying-glass"></span>
            </button>
        </div>
    </div>
</header>

@code {
    private bool searching;
    private bool focusSearch;
    private string currentPage;
    private string searchQuery = string.Empty;

    protected override void OnInitialized()
    {
        ApplyLocationChanged();
        navigator.LocationChanged += (s, a) => ApplyLocationChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (this.focusSearch)
        {
            await FocusAsync("#search");
            this.focusSearch = false;
        }
    }

    private void ApplyLocationChanged()
    {
        currentPage = navigator.Uri.Replace(navigator.BaseUri, "").Trim();
        StateHasChanged();
    }

    private bool IsCurrentPage(string route) => currentPage == route;

    private void ToggleSearching()
    {
        this.searching = !this.searching;
        if (!searching)
            searchQuery = string.Empty;
        else
            this.focusSearch = true;
    }

    private void OnSearch(KeyboardEventArgs args = null)
    {
        if (args is not null && args.Code != "Enter" && args.Code != "NumpadEnter")
            return;

        this.searching = !this.searching;
        navigator.NavigateTo($"search/{this.searchQuery}");
        searchQuery = string.Empty;
    }

    private async Task FocusAsync(string selector) => await js.InvokeVoidAsync("focusElement", selector);
}